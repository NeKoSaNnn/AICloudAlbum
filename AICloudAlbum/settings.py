"""
Django settings for AICloudAlbum project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import platform
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECURE_CONTENT_TYPE_NOSNIFF = False

import mimetypes

mimetypes.add_type('text/css', '.css')
mimetypes.add_type('application/javascript', '.js')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#pbk6n0rcclnxtctv%#)wb&gujayk!+d@peo0c-)7fdaz0)=oo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'Album.apps.AlbumConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'captcha',
    "compressor",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AICloudAlbum.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AICloudAlbum.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if platform.system() == "Linux":
    db_name = "aicloudalbumdb"
else:
    db_name = "aicloudalbumdb_test"

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': db_name,  # 本地测试使用aicloudalbumdb_test，服务器使用aicloudalbumdb
        "USER": "lab415",
        "PASSWORD": "Lab441155",
        "PORT": 3306,
        "HOST": "101.132.28.19",
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'collect_static')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "upload_imgs"),
    os.path.join(BASE_DIR, "video"),
    os.path.join(os.path.join(BASE_DIR, "upload_imgs"), "compress_imgs"),
]
if not os.path.exists(os.path.join(BASE_DIR, "upload_imgs")):
    os.mkdir(os.path.join(BASE_DIR, "upload_imgs"))
if not os.path.exists(os.path.join(BASE_DIR, "video")):
    os.mkdir(os.path.join(BASE_DIR, "video"))
if not os.path.exists(os.path.join(os.path.join(BASE_DIR, "upload_imgs"), "compress_imgs")):
    os.mkdir(os.path.join(os.path.join(BASE_DIR, "upload_imgs"), "compress_imgs"))

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # other finders..
    'compressor.finders.CompressorFinder',
)

# Captcha验证码设置
CAPTCHA_IMAGE_SIZE = (85, 55)
CAPTCHA_LENGTH = 4

# 上传文件路径
MEDIA_URL = "/upload_imgs/"
MEDIA_ROOT = os.path.join(BASE_DIR, "upload_imgs")

COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True
COMPRESS_CSS_FILTERS = [
    # creates absolute urls from relative ones
    'compressor.filters.css_default.CssAbsoluteFilter',
    # css minimizer
    'compressor.filters.cssmin.CSSMinFilter'
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter'
]

COMPRESS_ROOT = os.path.join(BASE_DIR, "static")
COMPRESS_URL = "/static/"

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
